/*!
 * linqjs v0.0.0
 * (c) Sven Schmidt 
 * License: MIT (http://www.opensource.org/licenses/mit-license.php)
 */
(function(){'use strict';
const window=this||(0,eval)('this');const DEBUG=!0;(function(Collection){try{if(typeof define==='function'&&define.amd){define(['require','exports'],function(){return Collection })} else if(exports&&module&&module.exports){exports=module.exports=Collection}} catch(err){window.Collection=Collection}}(function(){let linqjsExports={}
let Collection;Collection=(function(){function Collection(W){O(l(W)||m(W),'Parameter must be iterable or generator!');this.iterable=W}
Collection.prototype=(function(){function next(){if(!this.started){this.started=!0;this.iterator=this.y()}
return this.iterator.next()}
function c(){this.started=!1}
function y(){const iter=this.iterable;if(m(iter)){return iter()} else{return function*(){yield* iter}()}}return{next,c,y }}());Collection.prototype[Symbol.iterator]=function*(){let qc;while(!0){qc=this.next();if(qc.done){this.c();break}
yield qc.value}}
return Collection}());function from(iterable){return new Collection(iterable)}
function Range(start,count){H(count,0,Infinity);return new Collection(function*(){let i=start;while(i!=count+start){yield i++}})}
function Repeat(val,count){H(count,0,Infinity);return new Collection(function*(){for(let i=0;i<count;i++){yield val}})}Object.defineProperty(Collection,'Empty',{get:function(){return Collection.from([])}});const ec={from,From:from,Range,Repeat }
E(Collection,ec);function A(fc,gc){return a(fc)===a(gc)}
function DefaultComparator(a,b){if(a<b){return -1}
if(b<a){return 1}
return 0};class AssertionError extends Error{constructor(expected,got){super(`Expected ${expected},got ${got}!`)}}
function O(ic,...args){if(!ic){if(args.length===1){throw new Error(msg)} else if(args.length===2){throw new AssertionError(...args)}}}
function L(kc){O(n(kc),'function',kc)}
function N(kc){O(q(kc),'array',kc)}
function I(coll){O(!o(coll),'Sequence is empty!')}
function J(obj){O(l(obj),'iterable',obj)}
function M(obj){O(p(obj),'collection',obj)}
function F(obj){O(h(obj),'string',obj)}
function G(obj){O(i(obj),'numeric value',obj)}function H(num,min,max=Infinity){G(num);O(num>=min&&num<=max,`Number must be between ${min} and ${max}!`)}
function K(coll,index){M(coll);O(i(index),'number',index);O(index>=0&&index<coll.Count(),'Index is out of bounds')}
function q(obj){return obj instanceof([]).constructor}
function n(obj){return typeof obj==='function'}
function i(n){return !isNaN(parseFloat(n))}
function o(coll){if(p(coll)){return o(coll.Take(1).ToArray())}
return coll.length===0}
function l(obj){return(Symbol.iterator in Object(obj))}
function h(obj){return typeof obj==='string'}
function p(obj){return obj instanceof Collection}function m(obj){return obj instanceof(function*(){}).constructor}
function g(obj){return typeof obj===typeof undefined}
function a(obj){return JSON.stringify(obj)}
function E(target,source){Object.assign(Object(target),source);return target}
function D(obj){E(linqjsExports,obj)}
function f(kc,value){return typeof kc==='undefined'?value:kc}
function C(coll,nc,oc,Q){L(oc);L(Q);I(coll);return Q([nc].concat(coll).reduce(oc))}
function e(coll,S=A){J(coll);L(S);const previous=[];return new Collection(function*(){const iter=coll.y();outer:for(let val of iter){inner:for(let prev of previous){if(S(val,prev)){continue outer}}
previous.push(val);yield val}})}
function d(arr,value){N(arr);let jcsBefore=[];let jcFound=!1;let qc;while((qc=arr.shift())&&!(jcFound=A(qc,value))){jcsBefore.push(qc)}
arr.unshift(...jcsBefore);return jcFound}
const bc=[Object,Number,Boolean,String,Symbol];function j(obj){return /native code/.test(Object(obj).toString())||!!~bc.indexOf(obj)}
function z(X=Object){if(X&&j(X)&&typeof X==='function'){let defaultValue=X();if(defaultValue instanceof Object||X===Date){return null} else{return defaultValue}}
return X}
function w(fn){L(fn);return fn.length}
function Min(mapFn=x=>x){L(mapFn);I(this);return Math.min.apply(null,this.Select(mapFn).ToArray())}
function Max(mapFn=x=>x){L(mapFn);I(this);return Math.max.apply(null,this.Select(mapFn).ToArray())}
function Sum(mapFn=x=>x){I(this);return this.Select(mapFn).Aggregate(0,(prev,curr)=>prev+curr)}
function Average(mapFn=x=>x){I(this);return this.Sum(mapFn)/ this.Count()}
function Concat(gc){J(gc);const cc=this.y();return new Collection(function*(){yield* cc;yield* gc})}
function Union(gc,S=A){J(gc);return this.Concat(gc).Distinct(S)}
function Join(gc,Y,Z,PFn,hc){J(gc);L(Y);L(Z);L(PFn);hc=f(hc,A);L(hc);const cc=this.y();return new Collection(function*(){const dc=gc[Symbol.iterator]();for(let fcValue of cc){const fcKey=Y(fcValue);for(let gcValue of dc){const gcKey=Z(gcValue);if(hc(fcKey,gcKey)){yield PFn(fcValue,gcValue)}}}})}
function Except(gc){J(gc);if(!p(gc)){gc=new Collection(gc)}
const cc=this.y();return new Collection(function*(){for(let val of cc){if(!gc.Contains(val)){yield val}}})}
function Zip(gc,PFn){J(gc);L(PFn);const cc=this.y();return new Collection(function*(){const dc=gc[Symbol.iterator]();for(let fcVal of cc){const gcNext=dc.next();if(gcNext.done){break}
yield PFn(fcVal,gcNext.value)}})}
function Intersect(gc,S=A){J(gc);L(S);const cc=this.ToArray();return new Collection(function*(){const dc=[...gc];for(let val of cc){if(dc.Any(jc=>S(val,jc))){yield val}}})}
function IndexOf(jcent,S=A){L(S);const iter=this.y();let i=0;for(let val of iter){if(S(val,jcent)){return i}
i++}
return -1}
function LastIndexOf(jcent,S=A){L(S);const iter=this.y();let i=0;let lastIndex=-1;for(let val of iter){if(S(val,jcent)){lastIndex=i}
i++}
return lastIndex}
function Contains(jc,S=A){return !!~this.IndexOf(jc,S)}
function Where(aa=(jc,index)=>!0){L(aa);const iter=this.y();const result=new Collection(function*(){let index=0;for(let val of iter){if(aa(val,index)){yield val}
index++}});return result}
function ConditionalWhere(ic,aa){if(ic){return this.Where(aa)} else{return this}}
function Count(aa=jc=>!0){let count=0;
let filtered=this.Where(aa);
while(!filtered.next().done){count++}
return count}
function Any(aa){if(o(this)){return !1}
if(!aa){return !0}
return !this.Where(aa).next().done}
function All(aa=jc=>!0){L(aa);return !this.Any(x=>!aa(x))}
function b(collection,originalFn,aaOrDefault=x=>!0,fallback=Object){let aa;if(j(aaOrDefault)||!n(aaOrDefault)){aa=x=>!0;fallback=aaOrDefault} else{aa=aaOrDefault}
L(aa);const defaultVal=z(fallback);if(o(collection)){return defaultVal}
let result=originalFn.call(collection,aa);if(!result){return defaultVal}
return result}
function ElementAt(index){K(this,index);const result=this.Skip(index).Take(1).ToArray()[0];this.c();return result}
function Take(count=0){G(count);if(count<=0){return Collection.Empty}
const iter=this.y();return new Collection(function*(){let i=0;for(let val of iter){yield val;if(++i===count){break}}})}
function Skip(count=0){G(count);if(count<=0){return this}
const result=this.SkipWhile((jc,index)=>index<count);this.c();return result}
function TakeWhile(aa=(jc,index)=>!0){L(aa);const iter=this.y();const result=new Collection(function*(){let index=0;let endTake=!1;for(let val of iter){if(!endTake&&aa(val,index++)){yield val;continue}
endTake=!0}});this.c();return result}
function TakeUntil(aa=(jc,index)=>!1){return this.TakeWhile((jc,index)=>!aa(jc,index))}
function SkipWhile(aa=(jc,index)=>!0){L(aa);const iter=this.y();return new Collection(function*(){let index=0;let endSkip=!1;for(let val of iter){if(!endSkip&&aa(val,index++)){continue}
endSkip=!0;yield val}})}
function SkipUntil(aa=(jc,index)=>!1){return this.SkipWhile((jc,index)=>!aa(jc,index))}
function First(aa=x=>!0){L(aa);I(this);const result=this.SkipWhile(jc=>!aa(jc)).Take(1).ToArray()[0];this.c();return result}
function FirstOrDefault(aaOrConstructor=x=>!0,constructor=Object){return b(this,First,aaOrConstructor,constructor)}
function Last(aa=x=>!0){L(aa);I(this);return this.Reverse().First(aa)}
function LastOrDefault(aaOrConstructor=x=>!0,constructor=Object){return b(this,Last,aaOrConstructor,constructor)}
function Single(aa=x=>!0){L(aa);I(this);let index=0;let result;for(let val of this.y()){if(aa(val)){result=val;break}
index++}
if(this.First(jc=>aa(jc)&&!A(jc,result))){throw new Error('Sequence contains more than one jcent')}
return result}
function SingleOrDefault(aaOrConstructor=x=>!0,constructor=Object){return b(this,Single,aaOrConstructor,constructor)}
function DefaultIfEmpty(X){if(!o(this)){return this}
return [z(X)]}
let HeapElement=(function(){function HeapElement(index,value){this.__index=index;
this.__value=value;
this.__isHeapElementInstance=!0}
HeapElement.CreateHeapElement=function CreateHeapElement(index,obj){if(obj===undefined||obj.__isHeapElementInstance){return obj}
return new HeapElement(index,obj)};
return HeapElement})();
let MinHeap=(function(){function MinHeap(jcents,comparator=DefaultComparator){N(jcents);
L(comparator);
this.jcents=jcents;
this.comparator=(a,b)=>{let res=comparator(a.__value,b.__value);
if(res!==0){return res}
return DefaultComparator(a.__index,b.__index)};
B(this.jcents,this.comparator)}
function r(jcents,comparator,i){let right=2*(i+1);
let left=right-1;
let bestIndex=i;
jcents[bestIndex]=HeapElement.CreateHeapElement(bestIndex,jcents[bestIndex]);
if(left<jcents.length){jcents[left]=HeapElement.CreateHeapElement(left,jcents[left]);
if(comparator(jcents[left],jcents[bestIndex])<0){bestIndex=left}}
if(right<jcents.length){jcents[right]=HeapElement.CreateHeapElement(right,jcents[right]);
if(comparator(jcents[right],jcents[bestIndex])<0){bestIndex=right}}
if(bestIndex!==i){let tmp=jcents[i];
jcents[i]=jcents[bestIndex];
jcents[bestIndex]=tmp;
r(jcents,comparator,bestIndex)}}
function B(jcents,comparator){if(jcents.length===0){return}
for(let i=Math.floor(jcents.length / 2);i>=0;i--){r(jcents,comparator,i)}}
MinHeap.prototype.hasTopElement=function(){return this.jcents.length>0};
MinHeap.prototype.getTopElement=function(){if(this.jcents.length===1){return this.jcents.pop().__value}
let topElement=this.jcents[0];
let tmp=this.jcents.pop();
this.jcents[0]=tmp;
r(this.jcents,this.comparator,0);
return topElement.__value};
MinHeap.prototype[Symbol.iterator]=function(){let heap=this;
return{next:function(){if(heap.hasTopElement()){return{done:!1,
value:heap.getTopElement()}}
return{done:!0}}}};
return MinHeap})();
let MaxHeap=(function(){function MaxHeap(jcents,comparator=DefaultComparator){N(jcents);
L(comparator);MinHeap.apply(this,[jcents,function(a,b){return -1*comparator(a,b)}])}
MaxHeap.prototype=Object.create(MinHeap.prototype);
MaxHeap.prototype.constructor=MaxHeap;
return MaxHeap})();function Aggregate(mc,oc,Q){const values=this.ToArray();if(typeof mc==='function'&&!oc&&!Q){return C(values.slice(1,values.length),values.slice(0,1)[0],mc,jc=>jc)} else if(typeof mc!=='function'&&typeof oc==='function'&&!Q){return C(values,mc,oc,jc=>jc)} else{return C(values,mc,oc,Q)}}
function Select(mapFn=x=>x){const iter=this.y();let index=0;return new Collection(function*(){for(let val of iter){yield mapFn(val,index);index ++}})}
function Flatten(){return this.SelectMany(x=>x)}
function SelectMany(mapFn,P=(x,y)=>y){L(mapFn);L(P);const iter=this.y();return new Collection(function*(){let index=0;for(let qc of iter){let pc=mapFn(qc,index);let newIter=pc;if(!l(pc)){newIter=[pc]} else{newIter=pc}
for(let val of newIter[Symbol.iterator]()){yield P(qc,val)}
index++}})}
function Distinct(S=A){L(S);return e(this,S)}
function ToArray(){return [...this.y()]}
function ToDictionary(T,R,U){L(T);if(!R&&!U){return this.ToDictionary(T,jc=>jc,A)} else if(!U&&w(R)===1){return this.ToDictionary(T,R,A)} else if(!U&&w(R)===2){return this.ToDictionary(T,jc=>jc,R)}L(U);L(R);let usedKeys=[];let result=new Map();const input=this.ToArray();const V=R;for(let value of input){let key=T(value);let jc=V(value);O(key!=null,'Key is not allowed to be null!');O(!usedKeys.Any(x=>U(x,key)),`Key '${key}' is already in use!`);usedKeys.push(key);result.set(key,jc)}
return result}
function ToJSON(){return a(this.ToArray())}
function Reverse(){const arr=this.ToArray();return new Collection(function*(){for(let i=arr.length-1;i>=0;i--){yield arr[i]}})}
function ForEach(fn){L(fn);for(let val of this.y()){fn(val)}}
function Add(value){this.Insert(value,this.Count())}
function Insert(value,index){O(index>=0&&index<=this.Count(),'Index is out of bounds!');const oldIter=this.ToArray();this.iterable=function*(){yield* oldIter.slice(0,index);yield value;yield* oldIter.slice(index,oldIter.length)}}
function Remove(value){let values=this.ToArray();const result=d(values,value);if(!result){return !1}
this.iterable=function*(){yield* values}
return !0}
let OrderedLinqCollection=(function(){function OrderedLinqCollection(iterable,comparator,heapConstructor){J(iterable);
L(comparator);
L(heapConstructor);
Collection.apply(this,[iterable]);
this.__comparator=comparator;
this.__heapConstructor=heapConstructor}
OrderedLinqCollection.prototype.ThenBy=function(lc){if(h(lc)){lc=GetComparatorFromKeySelector(lc)}
L(lc);
let qcComparator=this.__comparator;
this.__comparator=(a,b)=>{let res=qcComparator(a,b);
if(res!==0){return res}
return lc(a,b)};
return this};
OrderedLinqCollection.prototype.y=function(){const _self=this;return function*(){yield* Reflect.construct(_self.__heapConstructor,[[..._self.iterable],_self.__comparator])}()}
return OrderedLinqCollection})();
function GetComparatorFromKeySelector(selector){F(selector);
if(selector===''){return Collection.prototype.DefaultComparator}if(!(selector.startsWith('[')||selector.startsWith('.'))){selector=`.${selector}`}
let result;eval(`result=function(a,b){return Collection.prototype.DefaultComparator(a${selector},b${selector})}`);
return result}
function Order(){return this.OrderBy(DefaultComparator)}
function OrderDescending(){return this.OrderByDescending(DefaultComparator)}
function OrderBy(comparator){if(h(comparator)){comparator=GetComparatorFromKeySelector(comparator)}
L(comparator);
return new OrderedLinqCollection(this,comparator,MinHeap)};
function OrderByDescending(comparator){if(h(comparator)){comparator=GetComparatorFromKeySelector(comparator)}
L(comparator);
return new OrderedLinqCollection(this,comparator,MaxHeap)};
function Shuffle(){return this.OrderBy(()=>Math.floor(Math.random()*3)-1 )}
function GroupBy(T,...args){const arr=this.ToArray();function k(arg){let result=w(arg)===2;try{result=result&&arg(1,1)&&!arg(1,2)} catch(err){result=!1}
return result}
function x(groups,key,U){for(let groupKey of groups.keys()){if(U(groupKey,key)){return groupKey}}
return key}
function u(T){return v(T,jc=>jc,undefined,A)}
function s(T,gc){let U,V;if(k(gc)){U=gc;V=jc=>jc} else{U=A;V=gc}
return t(T,V,U)}
function t(T,gc,third){let U,V,P;if(k(third)){U=third} else{P=third}
if(w(gc)===2){P=gc} else{V=gc}
if(!U){U=A}
if(!V){V=jc=>jc}
return v(T,V,P,U)}
function v(T,V,P,U){L(T);L(V);O(g(P)||n(P),'P must be undefined or function!');L(U);let groups=new Map();let result;for(let val of arr){const key=x(groups,T(val),U);const jc=V(val);if(groups.has(key)){groups.get(key).push(jc)} else{groups.set(key,[jc])}}
if(P){result=groups.ToArray().Select(g=>P(...g))} else{result=groups}
return result}
let fn;switch(args.length){case 0:;fn=u;break;case 1:;fn=s;break;case 2:;fn=t;break;case 3:;fn=v;break;default:;throw new Error('GroupBy kceter count can not be greater than 4!')}
return fn(T,...args)}
function SequenceEqual(gc,S=A){if(!l(gc)){return !1}
const fc=this.ToArray();gc=gc.ToArray();if(fc.length!==gc.length){return !1}
for(let i=0;i<fc.length;i++){let fcVal=fc[i];let gcVal=gc[i];if(!S(fcVal,gcVal)){return !1}}
return !0}D({DefaultComparator,Min,Max,Average,Sum,Concat,Union,Join,Except,Zip,Intersect,Where,ConditionalWhere,Count,Contains,IndexOf,LastIndexOf,Any,All,ElementAt,Take,TakeWhile,TakeUntil,Skip,SkipWhile,SkipUntil,Contains,First,FirstOrDefault,Last,LastOrDefault,Single,SingleOrDefault,DefaultIfEmpty,DefaultComparator,MinHeap,MaxHeap,Aggregate,Distinct,Select,SelectMany,Flatten,Reverse,ToArray,ToDictionary,ToJSON,ForEach,Add,Insert,Remove,GetComparatorFromKeySelector,OrderedLinqCollection,Order,OrderBy,OrderDescending,OrderByDescending,Shuffle,GroupBy,SequenceEqual });E(Collection.prototype,linqjsExports);OrderedLinqCollection.prototype=E(E({},Collection.prototype),OrderedLinqCollection.prototype);
OrderedLinqCollection.prototype.constructor=OrderedLinqCollection;
const protosToApplyWrappers=[window.Array.prototype,window.Set.prototype,window.Map.prototype];Object.keys(Collection.prototype).forEach(k=>{for(let proto of protosToApplyWrappers){proto[k]=function(...args){return new Collection(this)[k](...args)}}});return Collection}()))}());